// Code generated by MockGen. DO NOT EDIT.
// Source: ./ring.go

// Package mock_battle_field is a generated GoMock package.
package mock_battle_field

import (
	battle_field "knights/battle_field"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCharacter is a mock of Character interface.
type MockCharacter struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterMockRecorder
}

// MockCharacterMockRecorder is the mock recorder for MockCharacter.
type MockCharacterMockRecorder struct {
	mock *MockCharacter
}

// NewMockCharacter creates a new mock instance.
func NewMockCharacter(ctrl *gomock.Controller) *MockCharacter {
	mock := &MockCharacter{ctrl: ctrl}
	mock.recorder = &MockCharacterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacter) EXPECT() *MockCharacterMockRecorder {
	return m.recorder
}

// CharacterType mocks base method.
func (m *MockCharacter) CharacterType() battle_field.CharacterType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharacterType")
	ret0, _ := ret[0].(battle_field.CharacterType)
	return ret0
}

// CharacterType indicates an expected call of CharacterType.
func (mr *MockCharacterMockRecorder) CharacterType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharacterType", reflect.TypeOf((*MockCharacter)(nil).CharacterType))
}

// DamagePoints mocks base method.
func (m *MockCharacter) DamagePoints(enemy battle_field.CharacterType) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DamagePoints", enemy)
	ret0, _ := ret[0].(int)
	return ret0
}

// DamagePoints indicates an expected call of DamagePoints.
func (mr *MockCharacterMockRecorder) DamagePoints(enemy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DamagePoints", reflect.TypeOf((*MockCharacter)(nil).DamagePoints), enemy)
}

// IsDead mocks base method.
func (m *MockCharacter) IsDead() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDead")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDead indicates an expected call of IsDead.
func (mr *MockCharacterMockRecorder) IsDead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDead", reflect.TypeOf((*MockCharacter)(nil).IsDead))
}

// ReceiveDamage mocks base method.
func (m *MockCharacter) ReceiveDamage(damage int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveDamage", damage)
}

// ReceiveDamage indicates an expected call of ReceiveDamage.
func (mr *MockCharacterMockRecorder) ReceiveDamage(damage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveDamage", reflect.TypeOf((*MockCharacter)(nil).ReceiveDamage), damage)
}
